#!/usr/bin/env ruby
$:.push(File.expand_path("../../lib", __FILE__))
require "typez/aws/compute/instance_price"
include Typez::AWS::Compute

region = "eu-west-1"
rate = 1.0
refresh = false

require "optparse"
opts = OptionParser.new do |o|
  o.on("-r REGION", "--region", "AWS region to use. default: #{region}") do |value|
    region = value
  end

  o.on("-e RATE", "--exchange-rate", Float, "Rate to be used to divide prices. default: #{rate}") do |value|
    rate = value
  end

  o.on("--refresh", "Refresh price list") do
    refresh = true
  end
end
opts.parse(ARGV)

def format_price(raw, rate = 1.0)
  return "-" if raw.nil?
  "%.03f" % [raw / rate]
end

def print_rows(*rows)
  puts rows.flatten.join("\t")
end

def price_columns(price, rate)
  return %w(- -) if price.nil?
  [format_price(price.hourly_rate, rate), format_price(price.monthly_rate, rate)]
end

if refresh || !Price.fetched?
  Price.update!
end

prices = Price.by_instance_type
require "typez/cli/table"
table = Typez::CLI::Table.new
table << [:region, region]
table << [:exchange_rate, rate] if rate != 1.0
table << []
table << [:Type, :Memory, :ECU, :Storage, :Network, "/hour", "/month", "best/hour", "best/month", :savings]

InstancePrice.for_region(region).sort_by { |i| i.instance_type.ecu || 0 }.each do |price|
  row = [
    price.instance_type.type,
    price.instance_type.memory,
    price.instance_type.ecu || "variable",
    price.instance_type.storage,
    price.instance_type.network_performance,
  ]
  row += price_columns(price.max_price, rate)
  row += price_columns(price.min_price, rate)
  row << ("%.02f%%" % [100 * price.savings])
  table << row
end

puts table
